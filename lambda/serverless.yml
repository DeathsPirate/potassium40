
service: potassium40

custom:
  aws_region: us-east-1
  bucketName: p40.${sls:instanceId}
  queueName: p40-scan-queue
  stage: functions

resources:
  Resources:

    p40Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
        AccessControl: Private
    
    scanQueue:
      Type: AWS::SQS::Queue
      DependsOn: deadLetterQueue
      Properties:
        QueueName: ${self:custom.queueName}
        MessageRetentionPeriod: 1200
        VisibilityTimeout: 240
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - deadLetterQueue
              - Arn
          maxReceiveCount: 2
    
    deadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.queueName}-dl
        MessageRetentionPeriod: 1209600

provider:
  name: aws
  runtime: python3.7
  logRetentionDays: 1
  stage: ${self:custom.stage}
  region: ${self:custom.aws_region}
  logRetentionInDays: 1  # don't need so many
  iamRoleStatements:
  # Bucket Permissions
  - Effect: Allow
    Action:
    - s3:ListBucket
    Resource:
      Fn::Join:
        - ""
        - - "arn:aws:s3:::"
          - ${self:custom.bucketName}
  # Bucket **Objects** Permissions
  - Effect: Allow
    Action:
    - s3:PutObject
    - s3:GetObject
    - s3:DeleteObject
    - s3:PutObjectAcl
    - s3:GetObjectAcl  # ACL permissions required for file_upload
    - s3:AbortMultipartUpload
    Resource:
      Fn::Join:
        - ""
        - - "arn:aws:s3:::"
          - ${self:custom.bucketName}
          - "/*"
  - Effect: Allow
    Action:
      - sqs:SendMessage
      - sqs:GetQueueUrl
    Resource:
      Fn::GetAtt:
        - scanQueue
        - Arn
  environment:
    bucket_name: ${self:custom.bucketName}
    scan_queue: 
      Ref: scanQueue

layers:
  majestic:
    package:
      artifact: layers/random_majestic_million.csv.zip  # Majestic 1 million (randomized)


functions:
  get_robots:
    handler: get_robots.get_robots
    memorySize: 1280
    timeout: 150
    description: Use Lambda functions to get robots.txt file from Cisco Umbrella 1 million
    layers:
      - {Ref: MajesticLambdaLayer}
      - arn:aws:lambda:${self:provider.region}:113088814899:layer:Klayers-python37-requests:3
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - scanQueue
              - Arn
          batchSize: 1
    reservedConcurrency: 800
  compress_object:
    handler: compress_object.main
    memorySize: 3008
    timeout: 600
    description: Compress specific object in s3 bucket using gzip
  clear_bucket:
    handler: clear_bucket.clear_bucket
    memorySize: 256
    timeout: 600
    description: Delete all items from bucket


package:
  exclude:
    - venv/**
    - .gitignore
    - node_modules/**
    - package.json
    - package-lock.json
    - layers/**
